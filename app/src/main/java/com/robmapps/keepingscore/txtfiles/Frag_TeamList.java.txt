package com.robmapps.keepingscore;

import android.app.AlertDialog;
import android.graphics.Color;
import android.os.Bundle;
import androidx.room.Room;
import android.content.IntentFilter;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * A simple {@link Fragment} subclass.
 * Use the {@link Frag_TeamList # newInstance} factory method to
 * create an instance of this fragment.
 */

public class Frag_TeamList extends Fragment {

    private EditText etTeamName, etPlayerName;
    private RecyclerView rvPlayerNames;
    private Button btnAddPlayer, btnSaveTeam, btnDeleteCurrentTeam, btnEditTeam,btnAddNewTeam;
    private Spinner spTeamList; // Declare the Spinner for team selection
    private boolean hasUnsavedChanges = false; // Flag for tracking unsaved changes
    private ArrayList<Player> playerNames = new ArrayList<>();
    /*private TeamAdapter teamAdapter;*/
    private PlayerAdapter playerAdapter; // Declare at the class level

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_team_list, container, false);
        SharedViewModel viewModel = new ViewModelProvider(requireActivity()).get(SharedViewModel.class);

        etTeamName = view.findViewById(R.id.etTeamName);
        etPlayerName = view.findViewById(R.id.etPlayerName);
        btnAddPlayer = view.findViewById(R.id.btnAddPlayer);
        btnSaveTeam = view.findViewById(R.id.btnSaveTeam);
        btnDeleteCurrentTeam = view.findViewById(R.id.btnDeleteCurrentTeam);
        btnAddNewTeam=view.findViewById(R.id.btnAddNewTeam);
        spTeamList = view.findViewById(R.id.spTeamList); // Reference the Spinner from the XML layout
        etTeamName.setOnFocusChangeListener((v, hasFocus) -> {
            if (!hasFocus) { // When the user finishes editing (loses focus)
                String teamName = etTeamName.getText().toString().trim();
                if (!teamName.isEmpty()) {
                    viewModel.setActiveTeamName(teamName); // Update the active team in the ViewModel
                } else {
                    Toast.makeText(requireContext(), "Team name cannot be empty", Toast.LENGTH_SHORT).show();
                }
            }
        });

        etTeamName.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                hasUnsavedChanges = true; // Mark changes as unsaved
            }
            @Override
            public void afterTextChanged(Editable s) {}
        });
        etPlayerName.setOnEditorActionListener((v, actionId, event) -> {
            if (actionId == EditorInfo.IME_ACTION_DONE ||
                    (event != null && event.getKeyCode() == KeyEvent.KEYCODE_ENTER && event.getAction() == KeyEvent.ACTION_DOWN)) {

                addPlayer(); // Call the addPlayer method
                etPlayerName.requestFocus(); // Ensure focus stays on the input field
                return true; // Consume the action to prevent focus changes
            }
            return false; // Allow default behavior otherwise
        });

// Initialize RecyclerView and PlayerAdapter
        rvPlayerNames.setAdapter(playerAdapter);
        rvPlayerNames.setLayoutManager(new LinearLayoutManager(requireContext()));

        playerAdapter = new PlayerAdapter(playerNames, new PlayerAdapter.OnPlayerActionListener() {
            @Override
            public void onPlayerDeleted(Player player) {
                playerNames.remove(player);
                playerAdapter.notifyDataSetChanged(); // No more error
            }

            @Override
            public void onPositionChanged(Player player) {
                // Handle position change (if needed)
            }
        });

        btnAddPlayer.setOnClickListener(v -> addPlayer());

        // Existing button logic (e.g., save, choose, edit teams)
        btnSaveTeam.setOnClickListener(v -> saveTeam());
        btnAddNewTeam.setOnClickListener(v ->addNewTeam());
        btnDeleteCurrentTeam.setOnClickListener(v -> deleteCurrentTeam());

        // Set up the dropdown for team selection
        setupTeamDropdown();
        viewModel.getActiveTeamName().observe(getViewLifecycleOwner(), teamName -> {
            if (teamName != null && !teamName.isEmpty() && !teamName.equals(etTeamName.getText().toString())) {
                etTeamName.setText(teamName); // Only update if the name has changed

                // Update the Spinner selection
                ArrayAdapter<String> adapter = (ArrayAdapter<String>) spTeamList.getAdapter();
                if (adapter != null) {
                    int position = adapter.getPosition(teamName);
                    spTeamList.setSelection(position); // Select the active team
                }

                // Load the player list for the active team
                ArrayList<Player> players = viewModel.getPlayersForActiveTeam();
                playerNames.clear();
                if (players != null) {
                    playerNames.addAll(players); // Add the players for the active team
                }
                playerAdapter.notifyDataSetChanged();
            } else {
                // Handle case for a new team (empty team name)
                etTeamName.setText(""); // Clear the team name field
                playerNames.clear(); // Clear the player list
                playerAdapter.notifyDataSetChanged();

                // If there are no teams, show "No teams saved yet" in the spinner
                viewModel.getTeams().observe(getViewLifecycleOwner(), teams -> {
                    List<String> teamNames;
                    if (teams != null && !teams.isEmpty()) {
                        teamNames = new ArrayList<>(teams.keySet()); // Use actual team names
                    } else {
                        teamNames = new ArrayList<>();
                        teamNames.add("No Teams Saved Yet"); // Placeholder entry
                    }

                    ArrayAdapter<String> adapter = new ArrayAdapter<String>(
                            requireContext(),
                            android.R.layout.simple_spinner_dropdown_item,
                            teamNames
                    ) {
                        @Override
                        public View getView(int position, View convertView, ViewGroup parent) {
                            View view = super.getView(position, convertView, parent);
                            TextView textView = (TextView) view;
                            if ("No Teams Saved Yet".equals(teamNames.get(position))) {
                                textView.setTextColor(Color.GRAY); // Style placeholder entry in grey
                            } else {
                                textView.setTextColor(Color.BLACK);
                            }
                            return view;
                        }
                    };

                    spTeamList.setAdapter(adapter);

                    // Reset spinner to default selection
                    spTeamList.setSelection(0);
                });
            }
        });


        return view;
    }

    private void deleteCurrentTeam() {
        String teamName = etTeamName.getText().toString().trim();

        if (teamName.isEmpty()) {
            Toast.makeText(getContext(), "No team selected to delete.", Toast.LENGTH_SHORT).show();
            return;
        }

        // Show a confirmation dialog
        new AlertDialog.Builder(requireContext())
                .setTitle("Delete Team")
                .setMessage("Are you sure you want to delete the team \"" + teamName + "\"? This action cannot be undone.")
                .setPositiveButton("Delete", (dialog, which) -> {
                    // Proceed with deletion
                    SharedViewModel viewModel = new ViewModelProvider(requireActivity()).get(SharedViewModel.class);
                    viewModel.removeTeam(teamName); // Remove the team from the ViewModel

                    // Clear the UI
                    etTeamName.setText(""); // Clear the team name field
                    playerNames.clear(); // Clear the player list
                    playerAdapter.notifyDataSetChanged(); // Refresh RecyclerView
                    viewModel.setActiveTeamName(""); // Reset the active team name

                    // Reset the spinner
                    ArrayAdapter<String> adapter = (ArrayAdapter<String>) spTeamList.getAdapter();
                    if (adapter != null && adapter.getCount() > 0) {
                        spTeamList.setSelection(0); // Reset to the default entry
                    }

                    Toast.makeText(getContext(), "Team \"" + teamName + "\" deleted.", Toast.LENGTH_SHORT).show();
                })
                .setNegativeButton("Cancel", (dialog, which) -> {
                    dialog.dismiss(); // Do nothing, user canceled
                })
                .show();
    }

    private void addNewTeam() {
        // Clear the team name and player list
        etTeamName.setText(""); // Clear the team name EditText
        playerNames.clear(); // Clear the player list
        playerAdapter.notifyDataSetChanged(); // Refresh the RecyclerView

        // Reset the active team in the ViewModel
        SharedViewModel viewModel = new ViewModelProvider(requireActivity()).get(SharedViewModel.class);
        viewModel.setActiveTeamName(""); // Set active team name to an empty string
        Log.d("NewTeamDebug", "Active team reset to: " + viewModel.getActiveTeamName().getValue());

        // Set focus to the team name field
        etTeamName.requestFocus(); // Move cursor to the EditText

        Toast.makeText(getContext(), "Create a new team!", Toast.LENGTH_SHORT).show();
    }
    private void addPlayer() {
        String playerName = etPlayerName.getText().toString().trim();
        if (!playerName.isEmpty()) {
            // Determine position for the new player
            List<String> occupiedPositions = new ArrayList<>();
            for (Player player : playerNames) {
                occupiedPositions.add(player.getPosition());
            }

            String position = "Off";
            for (String pos : Player.POSITIONS) {
                if (!occupiedPositions.contains(pos)) {
                    position = pos;
                    break;
                }
            }

            // Add the new player
            Player newPlayer = new Player(playerName, position);
            playerNames.add(newPlayer);

            // Notify the adapter of the change
            playerAdapter.notifyDataSetChanged();

            // Reset the input field
            etPlayerName.setText("");
            etPlayerName.requestFocus();
            hasUnsavedChanges = true;

            Toast.makeText(getContext(), "Player added: " + playerName + " as " + position, Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(getContext(), "Enter a player name!", Toast.LENGTH_SHORT).show();
            etPlayerName.requestFocus();
        }
    }




    public interface OnTeamActionListener {
        void onTeamSaved(String teamName, ArrayList<String> playerNames);
        void onTeamChosen();
        void onTeamEdited(String teamName, ArrayList<String> playerNames);
    }
    private void saveTeam() {
        String teamName = etTeamName.getText().toString().trim();
        if (teamName.isEmpty()) {
            Toast.makeText(getContext(), "Please enter a team name", Toast.LENGTH_SHORT).show();
            return;
        }

        // Access the ViewModel
        SharedViewModel viewModel = new ViewModelProvider(requireActivity()).get(SharedViewModel.class);
        String currentTeamName = viewModel.getActiveTeamName().getValue();

        // Retrieve or initialize the teams map
        HashMap<String, ArrayList<Player>> teams = viewModel.getTeams().getValue();
        if (teams == null) {
            teams = new HashMap<>();
        }

        if (currentTeamName != null && !currentTeamName.isEmpty() && !currentTeamName.equals(teamName)) {
            // Rename the team: Move players to the new name
            ArrayList<Player> players = teams.remove(currentTeamName);
            teams.put(teamName, players != null ? players : new ArrayList<>()); // Retain players or use an empty list
        } else {
            // Add or update the current team (empty player list allowed)
            teams.put(teamName, new ArrayList<>(playerNames)); // Save current players (could be empty)
        }

        viewModel.setTeams(teams); // Update teams in the ViewModel
        viewModel.setActiveTeamName(teamName); // Update the active team name

        updateSpinner(); // Refresh the spinner to display the updated team list
        Toast.makeText(getContext(), "Team saved successfully!", Toast.LENGTH_SHORT).show();
        Log.d("SaveTeamDebug", "Team saved: " + teamName + ", Players: " + playerNames);
    }


    private void chooseTeam(String teamName) {
        SharedViewModel viewModel = new ViewModelProvider(requireActivity()).get(SharedViewModel.class);
        viewModel.setActiveTeamName(teamName);

        // Display a Toast message in the Fragment
        Toast.makeText(requireContext(), "Active team set to: " + teamName, Toast.LENGTH_SHORT).show();
    }

    private void setupTeamDropdown() {
        SharedViewModel viewModel = new ViewModelProvider(requireActivity()).get(SharedViewModel.class);

        viewModel.getTeams().observe(getViewLifecycleOwner(), teams -> {
            if (teams != null && !teams.isEmpty()) {
                // Convert team keys to a list for the adapter
                List<String> teamNames = new ArrayList<>(teams.keySet());

                // Initialize the ArrayAdapter
                ArrayAdapter<String> adapter = new ArrayAdapter<>(
                        requireContext(), // Use requireContext() for a valid context
                        android.R.layout.simple_spinner_dropdown_item, // Default dropdown layout
                        teamNames
                );
                // Set the adapter to the Spinner
                spTeamList.setAdapter(adapter);
                // Manually set the selection to match the active team
                String activeTeam = viewModel.getActiveTeamName().getValue();
                if (activeTeam != null) {
                    int position = adapter.getPosition(activeTeam);
                    spTeamList.setSelection(position);
            } else {
                // Handle empty dataset
                spTeamList.setAdapter(null); // Clear the dropdown if no teams exist
                Toast.makeText(requireContext(), "No teams available", Toast.LENGTH_SHORT).show();
            }
        };
            spTeamList.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                @Override
                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                    // Avoid any heavy processing here
                    String selectedTeam = parent.getItemAtPosition(position).toString();
                    SharedViewModel viewModel = new ViewModelProvider(requireActivity()).get(SharedViewModel.class);
                    viewModel.setActiveTeamName(selectedTeam);
                }

                @Override
                public void onNothingSelected(AdapterView<?> parent) {}
            });


        });
    };
    private void updateSpinner() {
        SharedViewModel viewModel = new ViewModelProvider(requireActivity()).get(SharedViewModel.class);

        HashMap<String, ArrayList<Player>> teams = viewModel.getTeams().getValue();
        if (teams != null) {
            List<String> teamNames = new ArrayList<>(teams.keySet());

            ArrayAdapter<String> spinnerAdapter = new ArrayAdapter<>(
                    getContext(),
                    android.R.layout.simple_spinner_item,
                    teamNames
            );
            spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
            spTeamList.setAdapter(spinnerAdapter);

            String activeTeamName = viewModel.getActiveTeamName().getValue();
            if (activeTeamName != null) {
                int position = teamNames.indexOf(activeTeamName);
                if (position >= 0) {
                    spTeamList.setSelection(position); // Automatically select the active team
                }
            }
        }
    }

}