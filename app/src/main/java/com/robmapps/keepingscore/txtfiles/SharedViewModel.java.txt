package com.robmapps.keepingscore;

import android.graphics.Color;
import android.util.Log;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModelProvider;
import android.content.SharedPreferences;
import com.robmapps.keepingscore.database.AppDatabase;
import com.robmapps.keepingscore.database.entities.GameStats;
import com.robmapps.keepingscore.database.entities.Team;
import com.robmapps.keepingscore.database.dao.TeamDAO;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SharedViewModel extends ViewModel {

    private final MutableLiveData<String> activeTeamName = new MutableLiveData<>();
    private final MutableLiveData<HashMap<String, ArrayList<Player>>> teams = new MutableLiveData<>(new HashMap<>());
    private final MutableLiveData<Integer> team1Score = new MutableLiveData<>(0);
    private final MutableLiveData<Integer> team2Score = new MutableLiveData<>(0);
    private final MutableLiveData<String> gameTimer = new MutableLiveData<>("00:00");
    private final MutableLiveData<Integer> currentQuarter = new MutableLiveData<>(1);
    private final MutableLiveData<String> currentCentrePass = new MutableLiveData<>("Team1");
    private final MutableLiveData<Integer> team1ScoreColor = new MutableLiveData<>(Color.rgb(51, 232, 20)); // Default color for Team 1
    private final MutableLiveData<Integer> team2ScoreColor = new MutableLiveData<>(Color.rgb(0, 0, 0)); // Default color for Team 2
    private final AppDatabase database;
    private final MutableLiveData<List<ScoringAttempt>> allActions = new MutableLiveData<>(new ArrayList<>());
    private SharedPreferences sharedPreferences;

    public SharedViewModel() {
        database = MyApplication.getDatabase(); // Access the database
    }

    public LiveData<List<Team>> getTeamsLive() {
        return database.teamDao().getAllTeams(); // Return all teams
    }
    // New LiveData for Game Stats
    public LiveData<List<GameStats>> getAllGameStats() {
        return database.gameStatsDao().getAllGameStats(); // Fetch all game stats from Room
    }

    public void insertGameStats(GameStats gameStats) {
        new Thread(() -> database.gameStatsDao().insertGameStats(gameStats)).start(); // Save game stats asynchronously
    }

    public void deleteGameStatsById(int id) {
        new Thread(() -> database.gameStatsDao().deleteGameStatsById(id)).start(); // Delete a specific game by ID
    }
    public void insertTeam(Team team) {
        new Thread(() -> database.teamDao().insertTeam(team)).start(); // Insert a team asynchronously
    }

    public void deleteAllTeams() {
        new Thread(() -> database.teamDao().deleteAllTeams()).start(); // Delete all teams asynchronously
    }

    public LiveData<String> getCurrentCentrePass() {
        return currentCentrePass;
    }

    public void setCurrentCentrePass(String teamName) {
        currentCentrePass.setValue(teamName);
    }

    public LiveData<Integer> getTeam1ScoreColor() {
        return team1ScoreColor;
    }

    public void setTeam1ScoreColor(int color) {
        team1ScoreColor.setValue(color);
    }

    public LiveData<Integer> getTeam2ScoreColor() {
        return team2ScoreColor;
    }

    public void setTeam2ScoreColor(int color) {
        team2ScoreColor.setValue(color);
    }

    public LiveData<Integer> getCurrentQuarter() {
        return currentQuarter;
    }

    public void setCurrentQuarter(int quarter) {currentQuarter.setValue(quarter);}

    public LiveData<String> getActiveTeamName() {return activeTeamName;    }

    public LiveData<Integer> getTeam1Score() {
        return team1Score;
    }
    public void updateTeam1Score(int scoreChange) {
        if (team1Score.getValue() != null) {
            team1Score.setValue(team1Score.getValue() + scoreChange);
        }
    }
    public LiveData<Integer> getTeam2Score() {
        return team2Score;
    }
    public void updateTeam2Score(int scoreChange) {
        if (team2Score.getValue() != null) {
            team2Score.setValue(team2Score.getValue() + scoreChange);
        }
    }

    public void setActiveTeamName(String teamName) {
        if (activeTeamName.getValue() == null || !activeTeamName.getValue().equals(teamName)) {
            activeTeamName.setValue(teamName); // Update LiveData only if the value is different
        }
    }

    public LiveData<HashMap<String, ArrayList<Player>>> getTeams() {
        return teams;
    }

    public void addTeam(String teamName, ArrayList<Player> players) {
        if (teams.getValue() != null) {
            HashMap<String, ArrayList<Player>> currentTeams = new HashMap<>(teams.getValue());
            currentTeams.put(teamName, players); // Add or update the team with the provided players
            teams.setValue(currentTeams); // Update the LiveData with the modified team list
        } else {
            HashMap<String, ArrayList<Player>> newTeams = new HashMap<>();
            newTeams.put(teamName, players); // Create a new team with the provided players
            teams.setValue(newTeams);
        }
    }

    public ArrayList<Player> getPlayersForActiveTeam() {
        String activeName = activeTeamName.getValue();
        if (activeName != null && teams.getValue() != null) {
            HashMap<String, ArrayList<Player>> currentTeams = teams.getValue();
            if (currentTeams.containsKey(activeName)) {
                return new ArrayList<>(currentTeams.get(activeName)); // Return a copy to avoid reference issues
            }
        }
        return new ArrayList<>(); // Return an empty list if no active team or players exist
    }

    public void updateAllActions(List<ScoringAttempt> updatedActions) {
        allActions.setValue(updatedActions); // Update the LiveData with the new list
    }
    public void setTeams(HashMap<String, ArrayList<Player>> updatedTeams) {
        teams.setValue(updatedTeams);
    }

    public void removeTeam(String teamName) {
        if (teams.getValue() != null) {
            // Safely create a new HashMap only if teams.getValue() is not null
            HashMap<String, ArrayList<Player>> currentTeams = teams.getValue() != null ? new HashMap<>(teams.getValue()) : new HashMap<>();
            currentTeams.remove(teamName); // Remove the team by name
            teams.setValue(currentTeams); // Update LiveData
        }
    }

    private void loadScoresFromPreferences() {
        int score1 = sharedPreferences.getInt("iScore1", 0);
        int score2 = sharedPreferences.getInt("iScore2", 0);
        team1Score.setValue(score1);
        team2Score.setValue(score2);
    }

    private void saveScoresToPreferences() {
        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putInt("iScore1", team1Score.getValue());
        editor.putInt("iScore2", team2Score.getValue());
        editor.apply();
    }

    public LiveData<List<ScoringAttempt>> getAllActions() {
        return allActions;
    }
    public void validatePlayerPositions(ArrayList<Player> players) {
        Map<String, Player> positionMap = new HashMap<>();
        for (Player player : players) {
            String position = player.getPosition();
            if (positionMap.containsKey(position) && !position.equals("Off")) {
                // Move the previous occupant to "Off"
                positionMap.get(position).setPosition("Off");
            }
            positionMap.put(position, player);
        }
    }
    public void recordAttempt(String playerPosition, boolean isSuccessful, String timestamp) {
        List<ScoringAttempt> currentActions = allActions.getValue();
        if (currentActions == null) {
            currentActions = new ArrayList<>();
        }
        currentActions.add(new ScoringAttempt(playerPosition, isSuccessful, timestamp));
        allActions.setValue(currentActions); // Update LiveData
    }

    public LiveData<String> getGameTimer() {
        return gameTimer;
    }
    public void updateGameTimer(String time) {
        gameTimer.setValue(time); // Update the timer display
    }
    public void resetGame() {
        team1Score.setValue(0); // Reset Team 1 score
        team2Score.setValue(0); // Reset Team 2 score
        gameTimer.setValue("00:00"); // Reset the timer
        currentQuarter.setValue(1); // Reset to the first quarter
    }
    public void swapCentrePass() {
        if (currentCentrePass.getValue() != null && currentCentrePass.getValue().equals("Team2")) {
            setCurrentCentrePass("Team1");
            setTeam1ScoreColor(Color.rgb(51, 232, 20));
            setTeam2ScoreColor(Color.rgb(0, 0, 0));
        } else {
            setCurrentCentrePass("Team2");
            setTeam1ScoreColor(Color.rgb(0, 0, 0));
            setTeam2ScoreColor(Color.rgb(51, 232, 20));
        }
    }
}
