private void exportGameStats(String fileName) {
        String gameLogContent = viewModel.getCurrentActionsLogString();
        OutputStream fos = null; // Use OutputStream
        Uri uri = null;
        StringBuilder exportFileContent = new StringBuilder();

        List<ScoringAttempt> actionsList = viewModel.getAllActions().getValue();
        if (actionsList != null && !actionsList.isEmpty()) {
            for (int i = 0; i < actionsList.size(); i++) {
                ScoringAttempt attempt = actionsList.get(i);
                exportFileContent.append(attempt.toString()); // Relies on ScoringAttempt.toString()
                if (i < actionsList.size() - 1) {      // Add a newline for all but the last item
                    exportFileContent.append("\n");
                }
            }
        }

        try {
            ContentValues contentValues = new ContentValues();
            contentValues.put(MediaStore.MediaColumns.DISPLAY_NAME, fileName); // File name
            contentValues.put(MediaStore.MediaColumns.MIME_TYPE, "text/plain"); // File MIME type

            // For Android Q (API 29) and above, save to the "Downloads" collection
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                contentValues.put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DOWNLOADS);
                uri = requireContext().getContentResolver().insert(MediaStore.Downloads.EXTERNAL_CONTENT_URI, contentValues);
            } else {
                // For older versions, save to the public Downloads directory
                // This requires WRITE_EXTERNAL_STORAGE permission for API < 29
                File downloadsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
                if (!downloadsDir.exists()) {
                    downloadsDir.mkdirs(); // Create the directory if it doesn't exist
                }
                File file = new File(downloadsDir, fileName);
                uri = Uri.fromFile(file); // Get Uri from file path for older versions
            }

            if (uri == null) {
                Toast.makeText(getContext(), "Failed to create file for saving.", Toast.LENGTH_SHORT).show();
                return;
            }

            fos = requireContext().getContentResolver().openOutputStream(uri);
            if (fos != null) {
                StringBuilder allActions = new StringBuilder();
                exportFileContent = new StringBuilder(0);

                exportFileContent.append(" " + tvTeam1.getText().toString() + " vs "+ etTeam2.getText().toString());
                exportFileContent.append("\n\n " + tvTeam1.getText().toString() + " Score: " + tvScore1.getText());// viewModel.getTeam1Score());
                exportFileContent.append("\n " + etTeam2.getText().toString() + " Score: " + tvScore2.getText());
                exportFileContent.append("\n");

                Map<String, PlayerShotStats> playerShootingStats = ShotAnalyser.analyzeShotData(gameLogContent);

                if (!playerShootingStats.isEmpty()) {
                    exportFileContent.append("\n--- Player Shooting Stats ---\n");
                    for (Map.Entry<String, PlayerShotStats> entry : playerShootingStats.entrySet()) {
                        String playerName = entry.getKey();
                        PlayerShotStats stats = entry.getValue();
                        int totalShots = stats.getGoals() + stats.getMisses();
                        double accuracy = 0.0;
                        if (totalShots > 0) {
                            accuracy = ((double) stats.getGoals() / totalShots) * 100;
                        }
                        exportFileContent.append(String.format(Locale.getDefault(),
                                "%s: %d Goals, %d Misses (Total: %d, Accuracy: %.1f%%)\n",
                                playerName, stats.getGoals(), stats.getMisses(), totalShots, accuracy));
                    }
                    exportFileContent.append("---------------------------\n");
                } else {
                    exportFileContent.append("\nNo shooting data to analyze for player percentages.\n");
                }

                exportFileContent.append("\n" + gameLogContent);

                //sAllActions=String.valueOf(sbExportStats);
                fos.write(exportFileContent.toString().getBytes()); // Write stats content to file
                Toast.makeText(getContext(), "Stats saved to Downloads folder: " + fileName, Toast.LENGTH_LONG).show();
            } else {
                Toast.makeText(getContext(), "Failed to open output stream.", Toast.LENGTH_SHORT).show();
            }

        } catch (IOException e) {
            Toast.makeText(getContext(), "Failed to save stats: " + e.getMessage(), Toast.LENGTH_LONG).show();
            e.printStackTrace();
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }